{"version":3,"sources":["components/bluetooth/heartRateSensor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HeartRateSensor","props","startNotificationHR","a","startNotification","stopNotificationHR","stopNotification","state","device","undefined","server","batteryInfo","isBluetoothAvailable","characteristics","hrmId","heartRateHistory","onClick","bind","onTracking","this","onInitialized","navigator","bluetooth","getAvailability","setState","addEventListener","event","value","preventDefault","console","log","_","isNil","Error","connect","connection","prev","error","chars","handleHeartRateMeasurement","characteristic","e","hr","parseHR","target","heartRate","requestDevice","filters","services","optionalServices","gatt","getPrimaryServices","getPrimaryService","service","heartRateCharacteristics","Promise","all","map","x","getCharacteristic","reduce","result","body_sensor_location","readValue","getUint8","sensorLocation","flags","index","getUint16","contactDetected","energyExpended","rrIntervals","byteLength","push","characteristicUUId","writeValue","startNotifications","stopNotifications","className","htmlFor","name","connected","level","levelState","powerState","disabled","join","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.02f36c46.chunk.js","sourcesContent":["import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nexport default class HeartRateSensor extends React.Component<IHeartRateSensorProps, IHeartRateSensorStates> {\r\n  constructor(props: IHeartRateSensorProps) {\r\n    super(props);\r\n    this.state = {\r\n      device: undefined,\r\n      server: undefined,\r\n      batteryInfo: undefined,\r\n      isBluetoothAvailable: false,\r\n      characteristics: {},\r\n      hrmId: undefined,\r\n      heartRateHistory: []\r\n    };\r\n    this.onClick = this.onClick.bind(this);\r\n    this.onTracking = this.onTracking.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.onInitialized();\r\n  }\r\n\r\n  async onInitialized() {\r\n    const isBluetoothAvailable = await navigator.bluetooth?.getAvailability();\r\n    this.setState({ isBluetoothAvailable });\r\n\r\n    if ('onavailabilitychanged' in navigator.bluetooth) {\r\n      navigator.bluetooth.addEventListener('availabilitychanged', event => {\r\n        this.setState({ isBluetoothAvailable: (event as any)?.value === true });\r\n      });\r\n    }\r\n  }\r\n\r\n  async onClick(event: React.MouseEvent) {\r\n    try {\r\n      event.preventDefault();\r\n      console.log(`Button onClicked`);\r\n\r\n      if (_.isNil(navigator.bluetooth))\r\n        throw new Error(\"Browser doesn't support intergrating bluetooth\");\r\n\r\n      let connection = await this.connect();\r\n      this.setState(prev => ({\r\n        device: connection?.device,\r\n        server: connection?.server,\r\n        characteristics: { ...prev.characteristics, ...connection?.characteristics }\r\n      }));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  async onTracking(event: React.MouseEvent) {\r\n    try {\r\n      event.preventDefault();\r\n\r\n      let chars = await this.startNotificationHR();\r\n      console.log(`Trying to start notification for HeartRateMeasurement`, chars);\r\n      if (_.isNil(chars)) throw new Error(\"Failed to tracking HR\");\r\n      await this.handleHeartRateMeasurement(chars);\r\n\r\n      // // Optional\r\n      // if (!_.isNil(this.state.characteristics['battery_level'])) {\r\n      //   let batteryChar = await this.startNotification('battery_level');\r\n      //   console.log(`Trying to start notification for BatteryLevel`, batteryChar);\r\n      //   this.setState({\r\n      //     batteryInfo: { level: (await batteryChar?.readValue())?.getInt8(0), levelState: undefined, powerState: undefined }\r\n      //   })\r\n      //   batteryChar?.addEventListener('characteristicvaluechanged', event => {\r\n      //     let e = event as BluetoothEventData;\r\n      //     let battery_level = e.target.value.getUint8(0);\r\n      //     this.setState(prev => ({\r\n      //       batteryInfo: { level: battery_level, levelState: undefined, powerState: undefined }\r\n      //     }))\r\n      //   })\r\n      // }\r\n\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async handleHeartRateMeasurement(characteristic: BluetoothRemoteGATTCharacteristic) {\r\n    characteristic.addEventListener('characteristicvaluechanged', (event) => {\r\n      let e = event as BluetoothEventData;\r\n      let hr = this.parseHR(e.target.value);\r\n      this.setState(prev => ({\r\n        heartRate: hr.heartRate,\r\n        heartRateHistory: [...prev.heartRateHistory, hr.heartRate || 0]\r\n      }))\r\n    })\r\n  }\r\n\r\n  //#region Services\r\n  async connect() {\r\n    try {\r\n      let device = await navigator.bluetooth.requestDevice({\r\n        filters: [{ services: ['heart_rate'] }],\r\n        optionalServices: ['battery_service', 'device_information'],\r\n      } as any);\r\n      let server = await device.gatt!.connect();\r\n      console.log(`Connected successfully with  services: `, await server.getPrimaryServices());\r\n      console.log(`Devices:`, device)\r\n\r\n      let service = await server.getPrimaryService('heart_rate');\r\n      let characteristics: { [prop in KnownCharacteristic]?: BluetoothRemoteGATTCharacteristic } = {};\r\n      const heartRateCharacteristics: any[] = [0x2A37];\r\n      characteristics = (await Promise.all(heartRateCharacteristics.map(async x => ({ [x]: await service.getCharacteristic(x) }))))\r\n        .reduce((prev, value) => { return { ...prev, ...value } }, characteristics);\r\n\r\n      // const batteryCharacteristics: KnownCharacteristic[] = ['battery_level'];\r\n      // let batteryService = await server.getPrimaryService('battery_service');\r\n      // if (!_.isNil(batteryService)) {\r\n      //   characteristics = (await Promise.all(batteryCharacteristics.map(async x => ({ [x]: await batteryService.getCharacteristic(x) }))))\r\n      //     .reduce((prev, value) => { return { ...prev, ...value } }, characteristics);\r\n      // }\r\n\r\n      // const deviceInformationCharacteristics: KnownCharacteristic[] = [];\r\n      // let deviceInformationService = await server.getPrimaryService('device_information');\r\n      // if (!_.isNil(deviceInformationService)) {\r\n      //   characteristics = (await Promise.all(deviceInformationCharacteristics.map(async x => ({ [x]: await deviceInformationService.getCharacteristic(x) }))))\r\n      //     .reduce((prev, value) => { return { ...prev, ...value } }, characteristics);\r\n      // }\r\n\r\n\r\n      let result = {\r\n        device,\r\n        server,\r\n\r\n        characteristics: characteristics,\r\n      } as IHeartRateSensorStates;\r\n      console.log(`Connection result: `, result);\r\n      return result;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  async getBodySensorLocation() {\r\n    let value = await await this.state.characteristics?.body_sensor_location?.readValue();\r\n    let sensorLocation = await value?.getUint8(0);\r\n    switch (sensorLocation) {\r\n      case 0: return 'Other';\r\n      case 1: return 'Chest';\r\n      case 2: return 'Wrist';\r\n      case 3: return 'Finger';\r\n      case 4: return 'Hand';\r\n      case 5: return 'Ear Lobe';\r\n      case 6: return 'Foot';\r\n      default: return 'Unknown';\r\n    }\r\n  }\r\n\r\n  startNotificationHR = async () => await this.startNotification(0x2A37);\r\n\r\n  stopNotificationHR = async () => await this.stopNotification(0x2A37);\r\n\r\n  parseHR(value: DataView) {\r\n    let flags = value.getUint8(0);\r\n    let rate16Bits = flags & 0x1;\r\n    let result: { heartRate?: number, contactDetected?: boolean, energyExpended?: number, rrIntervals?: number[] } = {};\r\n    let index = 1;\r\n\r\n    if (rate16Bits) {\r\n      result.heartRate = value.getUint16(index, /*littleEndian=*/true);\r\n      index += 2;\r\n    } else {\r\n      result.heartRate = value.getUint8(index);\r\n      index += 1;\r\n    }\r\n\r\n    let contactDetected = flags & 0x2;\r\n    let contactSensorPresent = flags & 0x4;\r\n    if (contactSensorPresent) {\r\n      result.contactDetected = !!contactDetected;\r\n    }\r\n    let energyPresent = flags & 0x8;\r\n    if (energyPresent) {\r\n      result.energyExpended = value.getUint16(index, /*littleEndian=*/true);\r\n      index += 2;\r\n    }\r\n\r\n    let rrIntervalPresent = flags & 0x10;\r\n    if (rrIntervalPresent) {\r\n      let rrIntervals = [];\r\n      for (; index + 1 < value.byteLength; index += 2) {\r\n        rrIntervals.push(value.getUint16(index, /*littleEndian=*/true));\r\n      }\r\n      result.rrIntervals = rrIntervals;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Utils\r\n  async readValue(characteristicUUId: KnownCharacteristic) {\r\n    return await this.state.characteristics[characteristicUUId]?.readValue();\r\n  }\r\n\r\n  async writeValue(characteristicUUId: KnownCharacteristic, value: any) {\r\n    return await this.state.characteristics[characteristicUUId]?.writeValue(value);\r\n  }\r\n\r\n  async startNotification(characteristicUUId: KnownCharacteristic) {\r\n    return this.state.characteristics[characteristicUUId]?.startNotifications();\r\n  }\r\n\r\n  async stopNotification(characteristicUUId: KnownCharacteristic) {\r\n    return this.state.characteristics[characteristicUUId]?.stopNotifications();\r\n  }\r\n  //#endregion\r\n\r\n  render() {\r\n    const { device, server } = this.state;\r\n    return (\r\n      <div className=\"container text-left\">\r\n        <div className=\"row\">\r\n          <h3>Bluetooth status: {this.state.isBluetoothAvailable ? 'available' : 'unavailable'}</h3>\r\n        </div>\r\n        <div className=\"row\">\r\n          <h3>Devices:</h3>\r\n        </div>\r\n        <div className=\"row\">\r\n          <label htmlFor=\"\" className=\"col-md-4\">Name: {device?.name}</label>\r\n          <label htmlFor=\"\" className=\"col-md-4\">HRM ID: {this.state.hrmId}</label>\r\n          <label htmlFor=\"\" className=\"col-md-4\">Connected: {server?.connected ? 'yes' : 'no'}</label>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <label htmlFor=\"\" className=\"col-md-3\">Battery information</label>\r\n          <label htmlFor=\"\" className=\"col-md-3\">Level: {this.state.batteryInfo?.level}</label>\r\n          <label htmlFor=\"\" className=\"col-md-3\">Level state: {this.state.batteryInfo?.levelState}</label>\r\n          <label htmlFor=\"\" className=\"col-md-3\">Power state: {this.state.batteryInfo?.powerState}</label>\r\n        </div>\r\n        <div className=\"row\">\r\n          <h3>HeartRate: {this.state.heartRate}</h3>\r\n        </div>\r\n        <div className=\"row\">\r\n          <button className=\"btn btn-primary\" onClick={this.onClick}>Discover</button>\r\n          <button className=\"btn btn-success\" disabled={_.isNil(this.state.device) || _.isNil(this.state.server) || !this.state.server.connected} onClick={this.onTracking}>Tracking</button>\r\n        </div>\r\n        <div className=\"row\">\r\n          <h3>HeartRate History: </h3>{this.state.heartRateHistory.join(', ')}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ntype KnownCharacteristic = 'body_sensor_location' | 'heart_rate_measurement' | 'battery_level' | 'serial_number_string'| 0x2A37;\r\ntype Diff<T extends keyof any, U extends keyof any> =\r\n  ({ [P in T]: P } & { [P in U]: never } & { [x: string]: never })[T];\r\ntype Overwrite<T, U> = Pick<T, Diff<keyof T, keyof U>> & U;\r\n\r\ninterface BluetoothEventData extends Event {\r\n  target: Overwrite<EventTarget, { value: DataView }>\r\n}\r\ninterface IHeartRateSensorProps { }\r\ninterface IHeartRateSensorStates {\r\n  device?: BluetoothDevice,\r\n  server?: BluetoothRemoteGATTServer,\r\n  batteryInfo?: { level: any, levelState: any, powerState: any },\r\n  isBluetoothAvailable: boolean,\r\n  hrmId?: string,\r\n  characteristics: { [name in KnownCharacteristic]?: BluetoothRemoteGATTCharacteristic },\r\n  heartRate?: number,\r\n  heartRateHistory: number[],\r\n  battery_level?: number\r\n}\r\n","import React from 'react';\r\nimport preval from 'preval.macro';\r\nimport './styles/App.scss';\r\nimport DiscoveryButton from './components/bluetooth/heartRateSensor';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <label>Build date: {preval`module.exports = new Date().toLocaleString()`}</label>\r\n        <DiscoveryButton></DiscoveryButton>\r\n      </header>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './styles/theme.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}