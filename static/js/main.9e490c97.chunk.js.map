{"version":3,"sources":["components/discoveryDevicesButton/index.tsx","App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["DiscoveryDevicesButton","props","state","onClick","bind","event","preventDefault","console","log","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","device","_","isNil","gatt","connected","connect","server","getPrimaryService","battery_service","getCharacteristic","battery_level","readValue","getUint8","error","this","React","Component","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"0VAOqBA,E,kDACjB,WAAYC,GAAsC,IAAD,8BAC7C,cAAMA,IACDC,MAAQ,GAEb,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAJ8B,E,6FAUnCC,G,mGAENA,EAAMC,iBACNC,QAAQC,IAAI,e,SAIOC,UAAUC,UAAUC,cAAc,CACjDC,kBAAkB,EAClBC,iBAAkB,CAAC,qB,UAFnBC,E,QAIAC,IAAEC,MAAMF,G,uEACZP,QAAQC,IAAR,kBAA+BM,K,UAClBA,EAAOG,Y,aAAP,EAAaC,W,sBAAYJ,EAAOG,K,mDAAaH,EAAOG,Y,aAAP,EAAaE,U,mCAAnEC,E,KACJb,QAAQC,IAAR,kBAA+BY,G,iBAGHA,Q,IAAAA,O,EAAAA,EAAQC,kBAAkB,mB,eAAlDC,E,OACJf,QAAQC,IAAI,kBAAmBc,G,iBAELA,Q,IAAAA,O,EAAAA,EAAiBC,kBAAkB,iB,eAAzDC,E,OACJjB,QAAQC,IAAI,+BAAgCgB,G,KAE5CjB,Q,iBAA6CiB,Q,IAAAA,O,EAAAA,EAAeC,Y,2JAAtB,EAAoCC,SAAS,G,uBAA3ElB,I,UAAI,yB,wDAGZD,QAAQoB,MAAR,M,gJAMJ,OAAQ,4BAAQxB,QAASyB,KAAKzB,SAAtB,iB,GA3CoC0B,IAAMC,WCoB3CC,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,kBAAC,EAAD,SCTYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLpB,QAAQoB,MAAMA,EAAM4B,a,kBEjJ5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.9e490c97.chunk.js","sourcesContent":["import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\n\r\n/**\r\n * @return {DiscoveryDevicesButton} React Component which request bluetooth devices onClicked\r\n */\r\nexport default class DiscoveryDevicesButton extends React.Component<IDiscoveryDevicesButtonProps>{\r\n    constructor(props: IDiscoveryDevicesButtonProps) {\r\n        super(props);\r\n        this.state = {};\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Called when the button is clicked\r\n     */\r\n    async onClick(event: React.MouseEvent) {\r\n        try {\r\n            event.preventDefault();\r\n            console.log('onDiscovery');\r\n\r\n            // Google Chrome will prompt user with a device chooser where they can pick one device or simply cancel the request.\r\n            // TODO: need add the filter for HRM devices \r\n            let device = await navigator.bluetooth.requestDevice({\r\n                acceptAllDevices: true,\r\n                optionalServices: ['battery_service']\r\n            });\r\n            if (_.isNil(device)) throw `Error during pairing bluetooth device`;\r\n            console.log(`THIS IS DEVICE:`, device)\r\n            let server = device.gatt?.connected ? device.gatt : await device.gatt?.connect();\r\n            console.log(`THIS IS SERVER:`, server);\r\n\r\n            // Getting Battery Service...\r\n            let battery_service = await server?.getPrimaryService('battery_service');\r\n            console.log('Battery Service', battery_service);\r\n            // Getting Battery Level Characteristic...\r\n            let battery_level = await battery_service?.getCharacteristic('battery_level');\r\n            console.log('Battery Level Characteristic', battery_level);\r\n            // Reading Battery Level...\r\n            console.log('Battery percentage is ', (await battery_level?.readValue())?.getUint8(0));\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<button onClick={this.onClick} >Discovery</button>)\r\n    }\r\n}\r\n\r\nexport interface IDiscoveryDevicesButtonProps {\r\n\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport DiscoveryDevicesButton from './components/discoveryDevicesButton';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.tsx</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <DiscoveryDevicesButton />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}