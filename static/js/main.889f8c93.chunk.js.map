{"version":3,"sources":["components/bluetooth/discoveryButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DiscoveryButton","props","state","device","undefined","server","batteryInfo","isBluetoothAvailable","onClick","bind","this","onInitialized","navigator","bluetooth","getAvailability","setState","addEventListener","event","value","preventDefault","console","log","_","isNil","Error","requestDevice","acceptAllDevices","optionalServices","id","name","uuids","gatt","connect","getPrimaryService","services","getCharacteristic","chars","TextDecoder","readValue","hrmID","decode","hrmId","error","className","htmlFor","connected","level","levelState","powerState","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.889f8c93.chunk.js","sourcesContent":["import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nexport default class DiscoveryButton extends React.Component<IDiscoveryButtonProps, IDiscoveryButtonStates> {\r\n\r\n  constructor(props: IDiscoveryButtonProps) {\r\n    super(props);\r\n    this.state = {\r\n      device: undefined,\r\n      server: undefined,\r\n      batteryInfo: undefined,\r\n      isBluetoothAvailable: false\r\n    };\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.onInitialized();\r\n  }\r\n\r\n  async onInitialized() {\r\n    const isBluetoothAvailable = await navigator.bluetooth?.getAvailability();\r\n    this.setState({ isBluetoothAvailable });\r\n\r\n    if ('onavailabilitychanged' in navigator.bluetooth) {\r\n      navigator.bluetooth.addEventListener('availabilitychanged', event => {\r\n        this.setState({ isBluetoothAvailable: (event as any)?.value === true });\r\n      });\r\n    }\r\n  }\r\n\r\n  async onClick(event: React.MouseEvent) {\r\n    try {\r\n      event.preventDefault();\r\n      console.log(`Button onClicked`);\r\n\r\n      if (_.isNil(navigator.bluetooth))\r\n        throw new Error(\"Browser doesn't support intergrating bluetooth\");\r\n\r\n      let device = await navigator.bluetooth.requestDevice({\r\n        // filters: [\r\n        //   { services: ['heart_rate', '0000180a-0000-1000-8000-00805f9b34fb'] },\r\n        //   {namePrefix:'ot'},\r\n        // ],\r\n        acceptAllDevices: true,\r\n        optionalServices: ['heart_rate', '0000180a-0000-1000-8000-00805f9b34fb']\r\n      });\r\n\r\n      if (_.isNil(device)) throw new Error('Failed to get device');\r\n      console.log(`Devices: `, device.id, device.name, device.uuids);\r\n\r\n      // Attempts to connect to remote GATT Server.\r\n      let server = await device.gatt?.connect();\r\n      if (_.isNil(server)) throw new Error(`Could not connect to GATT Server`);\r\n\r\n      let services = await server.getPrimaryService('0000180a-0000-1000-8000-00805f9b34fb');\r\n      if(_.isNil(services)) throw new Error(`Could not get HRM ID service`);\r\n\r\n      let chars =await services.getCharacteristic('00002a25-0000-1000-8000-00805f9b34fb');\r\n      if(_.isNil(chars)) throw new Error(`Could not get HRM ID data`);\r\n\r\n      let hrmID = (new TextDecoder('utf8')).decode(await chars.readValue());\r\n\r\n      this.setState({\r\n        device: device,\r\n        server: server,\r\n        hrmId: hrmID\r\n      })\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  // async getBatteryInfos(event: React.MouseEvent) {\r\n  //   event?.preventDefault();\r\n  //   const { server } = this.state;\r\n  //   let service = await server!.getPrimaryService('battery_service');\r\n  //   let battery_level = await service.getCharacteristic('battery_level');\r\n  //   let battery_level_state = await service.getCharacteristic('battery_level_state');\r\n  //   let battery_power_state = await service.getCharacteristic('battery_power_state');\r\n\r\n  // }\r\n\r\n  render() {\r\n    const { device, server } = this.state;\r\n    return (\r\n      <div className=\"container text-left\">\r\n        <div className=\"row\">\r\n          <h3>Bluetooth status: {this.state.isBluetoothAvailable ? 'available' : 'unavailable'}</h3>\r\n        </div>\r\n        <div className=\"row\">\r\n          <h3>Devices:</h3>\r\n        </div>\r\n        <div className=\"row\">\r\n          <label htmlFor=\"\" className=\"col-md-4\">Name: {device?.name}</label>\r\n          <label htmlFor=\"\" className=\"col-md-4\">HRM ID: {this.state.hrmId}</label>\r\n          <label htmlFor=\"\" className=\"col-md-4\">Connected: {server?.connected ? 'yes' : 'no'}</label>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <label htmlFor=\"\" className=\"col-md-3\">Battery information</label>\r\n          <label htmlFor=\"\" className=\"col-md-3\">Level: {this.state.batteryInfo?.level}</label>\r\n          <label htmlFor=\"\" className=\"col-md-3\">Level state: {this.state.batteryInfo?.levelState}</label>\r\n          <label htmlFor=\"\" className=\"col-md-3\">Power state: {this.state.batteryInfo?.powerState}</label>\r\n        </div>\r\n        <div className=\"row\">\r\n          <button className=\"btn btn-primary\" onClick={this.onClick}>Discover</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface IDiscoveryButtonProps { }\r\ninterface IDiscoveryButtonStates {\r\n  device?: BluetoothDevice,\r\n  server?: BluetoothRemoteGATTServer\r\n  batteryInfo?: { level: any, levelState: any, powerState: any },\r\n  isBluetoothAvailable: boolean,\r\n  hrmId?: string\r\n}\r\n","import React from 'react';\r\nimport preval from 'preval.macro';\r\nimport logo from './logo.svg';\r\nimport './styles/App.scss';\r\nimport DiscoveryButton from './components/bluetooth/discoveryButton';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <label>Build date: {preval`module.exports = new Date().toLocaleString()`}</label>\r\n        <DiscoveryButton></DiscoveryButton>\r\n      </header>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './styles/theme.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}